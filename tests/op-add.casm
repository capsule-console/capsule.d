; Test add (arithmetic addition) with a range of values
; Store the result of rs1 + rs2 + imm to rd

.extern write_int

.const meta.exit_ok, 0x0001
.const stdio.init, 0x3000
.const stdio.put_byte, 0x3002

.bss
    ; Reserve memory needed by write_int
    write_int.target: .resw 1

.text
.entry
    ; Initialize
    ecalli Z, Z, stdio.init
    la S, write_int.target
    li B, ' '
    ; 0
    add A, Z, Z, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 16
    add A, Z, Z, 16 call R, write_int ecalli Z, B, stdio.put_byte
    ; 16
    li X, 16
    add A, X, Z, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 16
    li X, 16
    add A, Z, X, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 30
    li X, 16
    add A, Z, X, 14 call R, write_int ecalli Z, B, stdio.put_byte
    ; 3
    li X, 1
    li Y, 1
    add A, X, Y, 1 call R, write_int ecalli Z, B, stdio.put_byte
    ; 111
    li X, 1
    li Y, 10
    add A, X, Y, 100 call R, write_int ecalli Z, B, stdio.put_byte
    ; -9
    li X, -3
    add A, X, X, -3 call R, write_int ecalli Z, B, stdio.put_byte
    ; 0
    li X, +123_456_789
    li Y, -123_456_789
    add A, X, Y, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 10
    li X, +20
    li Y, -40
    add A, X, Y, +30 call R, write_int ecalli Z, B, stdio.put_byte
    ; 0
    li X, 1
    li Y, 0xffffffff
    add A, X, Y, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 0
    li X, 0xffffffff
    li Y, 1
    add A, X, Y, 0 call R, write_int ecalli Z, B, stdio.put_byte
    ; 0
    li X, 1
    add A, X, Z, 0xffff call R, write_int ecalli Z, B, stdio.put_byte
    ; 1
    li X, 1
    add A, X, X, 0xffff call R, write_int
    ; All done
    ecalli Z, Z, meta.exit_ok
