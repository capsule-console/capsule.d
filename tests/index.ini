; This INI file is loaded by the capcheck program.
; Each [section] describes a test case used to verify the behavior
; of a Capsule toolchain implementation.

; Command or path to use when assembling source files
asm-command=casm

; Command or path to use when linking compiled object files
link-command=clink

; Command or path to use when running compiled program files
run-command=capsule

; Path to output object files, program files, and stdout logs
output=bin/

; Test cases begin here

; Example programs

[example-collatz]
comment=Verify the behavior of a Collatz sequence test program.
source=example-collatz.casm
source=lib/read-int.casm
source=lib/write-int.casm
source=lib/write-stringz.casm
[example-collatz.512]
case-of=example-collatz
stdin=512
stdout=512 256 128 64 32 16 8 4 2 1
status=Ok
[example-collatz.19]
case-of=example-collatz
stdin=19
stdout=19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
status=Ok
[example-collatz.1]
case-of=example-collatz
stdin=1
stdout=1
status=Ok
[example-collatz.0]
case-of=example-collatz
stdin=0
stdout=Error: Invalid input.
status=ExecutionExitError
[example-collatz.ovf]
case-of=example-collatz
stdin=10000000000000
stdout=Error: Invalid input.
status=ExecutionExitError
[example-collatz.neg]
case-of=example-collatz
stdin=-500
stdout=Error: Invalid input.
status=ExecutionExitError

[example-divrem]
comment=Ensure the constraint (dividend == divisor * quotient + remainder) \
    is met for signed and unsigned division instructions, for an broad \
    range of possible divisor and dividend values.
source=example-divrem.casm
source=lib/write-hex.casm
stdout=1000!
status=Ok

[example-hello-world]
comment=A simple and self-contained "Hello, world!" example program.
source=example-hello-world.casm
stdout=Hello, world!
status=Ok

[example-hello-world-vanilla]
comment=A "Hello, world!" program using more explicit syntax and less \
    compiler magic.
source=example-hello-world-vanilla.casm
stdout=Hello, world!
status=Ok

[example-stack]
comment=Verify the behavior of a simple program which performs some \
    common and conventional stack operations.
source=example-stack.casm
source=lib/write-stringz.casm
stdout=Hello! Nice! Cool!

; Tests for library helper functions

[lib-read-int]
comment=Verify the behavior of the "read_int" utility function \
    which can be used to parse a signed decimal integer via stdin.
source=lib-read-int.casm
source=lib/read-int.casm
source=lib/write-int.casm
source=lib/write-stringz.casm
stdin=\
0,1,+1,-1,100,-100,65535,12345678,2147483647,-2147483648,\
2147483648,-2147483649,123456789123456789,+10000000000,-10000000000!
stdout=\
int: 0 end: ',' int: 1 end: ',' int: 1 end: ',' int: -1 end: ',' \
int: 100 end: ',' int: -100 end: ',' int: 65535 end: ',' \
int: 12345678 end: ',' int: 2147483647 end: ',' int: -2147483648 end: ',' \
ovf end: ',' ovf end: ',' ovf end: ',' ovf end: ',' ovf end: '!'
status=Ok

[lib-write-hex]
comment=Verify the behavior of the "write_hex" utility function \
    which is commonly used by many of the test cases to \
    write the results of computations to stdout.
source=lib-write-hex.casm
source=lib/write-hex.casm
stdout=\
1 2 3 4 5 6 7 8 9 a b c d e f 80 7f ff 999 abc \
1234 8000 8080 ffff 11111 abcde fffff abcdef \
ffffff fffffff 12345678 80000001 fedcba98 ffffffff 0
status=Ok

[lib-write-int]
comment=Verify the behavior of the "write_int" utility function \
    which is commonly used by many of the test cases to \
    write the results of computations to stdout.
source=lib-write-int.casm
source=lib/write-int.casm
stdout=\
0 1 -1 2 -2 8 -11 16 81 -255 2048 65536 800200 \
-12345678 2147483647 -2147483648
status=Ok

[lib-write-uint]
comment=Verify the behavior of the "write_uint" utility function \
    which is commonly used by many of the test cases to \
    write the results of computations to stdout.
source=lib-write-uint.casm
source=lib/write-int.casm
stdout=\
0 1 2 8 11 16 81 255 2048 65536 800200 12345678 \
2147483647 2147483648 2468123455 3000000000 4294967295
status=Ok

; Tests for individual assembler directives

[directive-byte]
comment=Verify the behavior of the "byte" directive
source=directive-byte.casm
source=lib/write-hex.casm
stdout=44332211 4433 44 88776655
status=Ok

[directive-half]
comment=Verify the behavior of the "half" directive
source=directive-half.casm
source=lib/write-hex.casm
stdout=56781234 def09abc ba98fedc 32107654 1234 fedc 34 12
status=Ok

[directive-incbin]
comment=Verify the behavior of the "incbin" directive
source=directive-incbin.casm
stdout=Hello, incbin world!
status=Ok

[directive-word]
comment=Verify the behavior of the "word" directive
source=directive-word.casm
source=lib/write-hex.casm
stdout=12345678 9abcdef0 fedcba98 76543210 5678 ba98 78 56
status=Ok

; Tests for individual instructions and pseudo-instructions

[op-add]
comment=Verify the behavior of the "add" instruction
source=op-add.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 3 111 -9 0 10 0 0 0 1
status=Ok

[op-addi]
comment=Verify the behavior of the "addi" pseudo-instruction
source=op-addi.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 2 101 -6 0 0 10 0 -1 0 1
status=Ok

[op-addwi]
comment=Verify the behavior of the "addwi" pseudo-instruction
source=op-addwi.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 2 101 -6 0 0 10 0 65535 65536 65537 0 1
status=Ok

[op-and]
comment=Verify the behavior of the "and" instruction
source=op-and.casm
source=lib/write-hex.casm
stdout=0 1 0 0 ffffffff 10010010
status=Ok

[op-andi]
comment=Verify the behavior of the "andi" instruction
source=op-andi.casm
source=lib/write-hex.casm
stdout=0 1 0 0 ffffffff 0 8421c33c 84218000 33c
status=Ok

[op-andwi]
comment=Verify the behavior of the "andwi" pseudo-instruction
source=op-andwi.casm
source=lib/write-hex.casm
stdout=0 1 0 0 ffff ffffffff 0 c33c 8421c33c 8000 33c
status=Ok

[op-auipc]
comment=Verify the behavior of the "auipc" instruction
source=op-auipc.casm
status=Ok

[op-beq]
comment=Verify the behavior of the "beq" instruction
source=op-beq.casm
status=Ok

[op-beqz]
comment=Verify the behavior of the "beqz" pseudo-instruction
source=op-beqz.casm
stdout=NNNYNNN
status=Ok

[op-bge]
comment=Verify the behavior of the "bge" instruction
source=op-bge.casm
stdout=NYYNYYNY
status=Ok

[op-bgez]
comment=Verify the behavior of the "bgez" pseudo-instruction
source=op-bgez.casm
stdout=YYYYNNN
status=Ok

[op-bgeu]
comment=Verify the behavior of the "bgeu" instruction
source=op-bgeu.casm
stdout=NNNYYYYY
status=Ok

[op-bgtz]
comment=Verify the behavior of the "bgtz" pseudo-instruction
source=op-bgtz.casm
stdout=YYYNNNN
status=Ok

[op-blez]
comment=Verify the behavior of the "blez" pseudo-instruction
source=op-blez.casm
stdout=NNNYYYY
status=Ok

[op-blt]
comment=Verify the behavior of the "blt" instruction
source=op-blt.casm
stdout=YNNYNNYN
status=Ok

[op-bltu]
comment=Verify the behavior of the "bltu" instruction
source=op-bltu.casm
stdout=YYYNNNNN
status=Ok

[op-bltz]
comment=Verify the behavior of the "bltz" pseudo-instruction
source=op-bltz.casm
stdout=NNNNYYY
status=Ok

[op-bne]
comment=Verify the behavior of the "bne" instruction
source=op-bne.casm
status=Ok

[op-bnez]
comment=Verify the behavior of the "bnez" pseudo-instruction
source=op-bnez.casm
stdout=YYYNYYY
status=Ok

[op-clo]
comment=Verify the behavior of the "clo" pseudo-instruction
source=op-clo.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1d 1d 1c 1c 1c 1a 19 18 18 12 \
11 10 10 c b a 9 8 8 7 6 5 4 3 2 1 0 0 0
status=Ok

[op-clz]
comment=Verify the behavior of the "clz" instruction
source=op-clz.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1d 1d 1c 1c 1c 1a 19 18 18 12 \
11 10 10 c b a 9 8 8 7 6 5 4 3 2 1 0 0 0
status=Ok

[op-cto]
comment=Verify the behavior of the "cto" pseudo-instruction
source=op-cto.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1e 1d 1c 1b 1a 19 18 16 14 11 \
10 10 e d c c a 8 7 6 5 4 4 3 2 1 1 0 0
status=Ok

[op-ctz]
comment=Verify the behavior of the "ctz" instruction
source=op-ctz.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1e 1d 1c 1b 1a 19 18 16 14 11 \
10 10 e d c c a 8 7 6 5 4 4 3 2 1 1 0 0
status=Ok

[op-div]
comment=Verify the behavior of the "div" instruction
source=op-div.casm
source=lib/write-int.casm
stdout=\
-1 -1 -1 0 0 1 1 -1 -1 3 5 16 256 -12 5000000 -5000000 -5000000 5000000 \
32767 -32768 2147483647 -2147483648 -2147483647 -2147483648
status=Ok

[op-divu]
comment=Verify the behavior of the "divu" instruction
source=op-divu.casm
source=lib/write-int.casm
stdout=\
4294967295 4294967295 4294967295 0 0 1 3 5 12 16 256 5000000 0 32767 65535 \
102261126 2147483647 613566756 4294967295
status=Ok

[op-lui]
comment=Verify the behavior of the "lui" instruction
source=op-lui.casm
source=lib/write-hex.casm
stdout=\
0 10000 800000 ff0000 \
12340000 80000000 ff000000 ffff0000
status=Ok

[op-neg]
comment=Verify the behavior of the "neg" pseudo-instruction
source=op-neg.casm
source=lib/write-int.casm
stdout=0 1 -1 500000 -500000 2147483647 -2147483647 -2147483648
status=Ok

[op-not]
comment=Verify the behavior of the "not" pseudo-instruction
source=op-not.casm
source=lib/write-hex.casm
stdout=ffffffff fffffffe 887700ff 0 ff edcba987 12345678
status=Ok

[op-or]
comment=Verify the behavior of the "or" instruction
source=op-or.casm
source=lib/write-hex.casm
stdout=0 1 ffffffff ffffffff ffffffff dc6293c9
status=Ok

[op-ori]
comment=Verify the behavior of the "ori" instruction
source=op-ori.casm
source=lib/write-hex.casm
stdout=\
0 1 ffffffff ffffffff ffffffff \
8421c33c ffffffff ffffc33c 8421cfff
status=Ok

[op-orwi]
comment=Verify the behavior of the "orwi" pseudo-instruction
source=op-orwi.casm
source=lib/write-hex.casm
stdout=\
0 1 ffff ffffffff ffffffff aabbffee \
8421c33c ffffffff 8421ffff 8421f33c 8421cfff
status=Ok

[op-lb]
comment=Verify the behavior of the "lb" instruction
source=op-lb.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
4 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
8 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
c 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
x 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128
status=Ok

[op-lbu]
comment=Verify the behavior of the "lbu" instruction
source=op-lbu.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
4 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
8 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
c 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
x 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255
status=Ok

[op-lh]
comment=Verify the behavior of the "lh" instruction
source=op-lh.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
4 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
8 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
c 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
x 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768
status=Ok

[op-lhu]
comment=Verify the behavior of the "lhu" instruction
source=op-lhu.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
4 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
8 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
c 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
x 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535
status=Ok

[op-lw]
comment=Verify the behavior of the "lw" instruction
source=op-lw.casm
source=lib/write-hex.casm
stdout=\
0 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
4 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
8 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
c 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
x 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff
status=Ok

[op-max]
comment=Verify the behavior of the "max" instruction
source=op-max.casm
source=lib/write-int.casm
stdout=0 1 -1 1 1 2147483647 0 2147483647 256
status=Ok

[op-maxu]
comment=Verify the behavior of the "minu" instruction
source=op-maxu.casm
source=lib/write-hex.casm
stdout=0 1 1 1 ffff 4000 ffffffff ffffffff
status=Ok

[op-min]
comment=Verify the behavior of the "min" instruction
source=op-min.casm
source=lib/write-int.casm
stdout=0 1 -1 -1 -1 -2147483648 -2147483648 0 128
status=Ok

[op-minu]
comment=Verify the behavior of the "minu" instruction
source=op-minu.casm
source=lib/write-hex.casm
stdout=0 0 0 1 ff 2000 80000000 10000000
status=Ok

[op-mul]
comment=Verify the behavior of the "mul" instruction
source=op-mul.casm
source=lib/write-int.casm
stdout=\
0 0 0 0 0 0 1 -1 -1 1 8 -8 -8 8 6 18 40 75 256 -256 10000 \
9740205 -63903213 1534644342 1 -2 2 -2147483647 0 -2147483648 \
-2147483648 0 0 -2147483648 -2147483648
status=Ok

[op-pcnt]
comment=Verify the behavior of the "pcnt" instruction
source=op-pcnt.casm
source=lib/write-hex.casm
stdout=\
0 1 1 1 1 2 2 2 3 4 4 4 5 5 6 7 8 8 8 8 9 a a b c d e f \
10 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20
status=Ok

[op-rem]
comment=Verify the behavior of the "rem" instruction
source=op-rem.casm
source=lib/write-int.casm
stdout=\
0 2147483647 -2147483648 1 -5 0 0 0 0 0 1 10 15 0 255 0 0 5 -5 5 -5 \
23647 -23648 2147483646 -2147483647 -48 0
status=Ok

[op-remu]
comment=Verify the behavior of the "remu" instruction
source=op-remu.casm
source=lib/write-int.casm
stdout=\
0 2147483647 2147483648 4294967295 1 5 0 0 0 0 10 15 0 255 0 0 17 300 \
5000000 65535 65535 0 1 1 946 2147483646 0 795 246585 4294967294
status=Ok

[op-revb]
comment=Verify the behavior of the "revb" instruction
source=op-revb.casm
source=lib/write-hex.casm
stdout=0 1000000 ff000000 ff 12345678 1010101 80000001
status=Ok

[op-revh]
comment=Verify the behavior of the "revh" instruction
source=op-revh.casm
source=lib/write-hex.casm
stdout=0 10000 ff0000 ff00 12345678 1010101 800100
status=Ok

[op-sb]
comment=Verify the behavior of the "sb" instruction
source=op-sb.casm
source=lib/write-hex.casm
stdout=\
ab20ef78 807fff00 ccf00f00 650111d9 \
ab20ef78 807fff00 ccf00f00 650111d9
status=Ok

[op-seqz]
comment=Verify the behavior of the "seqz" pseudo-instruction
source=op-seqz.casm
stdout=10000000
status=Ok

[op-sgez]
comment=Verify the behavior of the "sgez" pseudo-instruction
source=op-sgez.casm
stdout=11010100
status=Ok

[op-sgtz]
comment=Verify the behavior of the "sgtz" pseudo-instruction
source=op-sgtz.casm
stdout=01010100
status=Ok

[op-sh]
comment=Verify the behavior of the "sh" instruction
source=op-sh.casm
source=lib/write-hex.casm
stdout=\
cdef5678 abcd4321 ffff0000 80007fff \
cdef5678 abcd4321 ffff0000 80007fff
status=Ok

[op-slez]
comment=Verify the behavior of the "slez" pseudo-instruction
source=op-slez.casm
stdout=10101011
status=Ok

[op-sll]
comment=Verify the behavior of the "sll" instruction
source=op-sll.casm
source=lib/write-hex.casm
stdout=\
73107310 e620e620 31073100 73100000 c4000000 0 e620e620 \
73107310 e620e620 31073100 73100000 c4000000 0 e620e620 \
73107310 e620e620 31073100 73100000 c4000000 0 0 cc41cc40
status=Ok

[op-slt]
comment=Verify the behavior of the "slt" instruction
source=op-slt.casm
stdout=10010010
status=Ok

[op-slti]
comment=Verify the behavior of the "slti" instruction
source=op-slti.casm
stdout=10010010100
status=Ok

[op-sltiu]
comment=Verify the behavior of the "sltiu" instruction
source=op-sltiu.casm
stdout=111000001
status=Ok

[op-sltwiu]
comment=Verify the behavior of the "sltwiu" pseudo-instruction
source=op-sltwiu.casm
stdout=11110000001
status=Ok

[op-sltu]
comment=Verify the behavior of the "sltu" instruction
source=op-sltu.casm
stdout=11100000
status=Ok

[op-sltwi]
comment=Verify the behavior of the "sltwi" pseudo-instruction
source=op-sltwi.casm
stdout=10010010111
status=Ok

[op-sltz]
comment=Verify the behavior of the "sltz" pseudo-instruction
source=op-sltz.casm
stdout=00101011
status=Ok

[op-snez]
comment=Verify the behavior of the "snez" pseudo-instruction
source=op-snez.casm
stdout=01111111
status=Ok

[op-sra]
comment=Verify the behavior of the "sra" instruction
source=op-sra.casm
source=lib/write-hex.casm
stdout=\
73107310 39883988 7310731 fffff310 1cc 0 39883988 \
73107310 39883988 7310731 fffff310 1cc 0 39883988 \
73107310 39883988 7310731 fffff310 1cc 0 ffffffff 1cc41cc4
status=Ok

[op-srl]
comment=Verify the behavior of the "srl" instruction
source=op-srl.casm
source=lib/write-hex.casm
stdout=\
73107310 39883988 7310731 f310 1cc 0 39883988 \
73107310 39883988 7310731 f310 1cc 0 39883988 \
73107310 39883988 7310731 f310 1cc 0 0 1cc41cc4
status=Ok

[op-sub]
comment=Verify the behavior of the "sub" instruction
source=op-sub.casm
source=lib/write-int.casm
stdout=\
0 0 1 -1 -1 1 0 5 -5 255 29950 -30050 \
0 -2147483648 0 2147483647 -1 1
status=Ok

[op-sw]
comment=Verify the behavior of the "sw" instruction
source=op-sw.casm
source=lib/write-hex.casm
stdout=\
12345678 2468cdef 3579bdf0 4321abcd \
0 ffffffff 7fffffff 80000000 \
12345678 2468cdef 3579bdf0 4321abcd \
0 ffffffff 7fffffff 80000000
status=Ok

[op-xor]
comment=Verify the behavior of the "xor" instruction
source=op-xor.casm
source=lib/write-hex.casm
stdout=0 0 ffffffff ffffffff 0 c4209281
status=Ok

[op-xori]
comment=Verify the behavior of the "xori" instruction
source=op-xori.casm
source=lib/write-hex.casm
stdout=0 0 ffffffff ffffffff 0 8421c33c 7bde3cc3 7bde433c 8421ccc3
status=Ok

[op-xorwi]
comment=Verify the behavior of the "xorwi" pseudo-instruction
source=op-xorwi.casm
source=lib/write-hex.casm
stdout=\
0 0 ffff ffffffff ffffffff ffff0000 0 \
8421c33c 84213cc3 7bde3cc3 8421433c 8421ccc3
status=Ok
