; This INI file is loaded by the capcheck program.
; Each [section] describes a test case used to verify the behavior
; of a Capsule toolchain implementation.

; Command or path to use when assembling source files
casm=casm

; Command or path to use when linking compiled object files
clink=clink

; Command or path to use when running compiled program files
capsule=capsule

; Path to output object files, program files, and stdout logs
output=bin/

; Test cases begin here

[hello-world]
comment=A simple and self-contained "Hello, world!" example program.
source=hello-world.casm
stdout=Hello, world!
status=Ok

[hello-world-vanilla]
comment=A "Hello, world!" program using more explicit syntax and less \
    compiler magic.
source=hello-world-vanilla.casm
stdout=Hello, world!
status=Ok

[write-hex]
comment=Verify the behavior of the "write_hex" utility function \
    which is commonly used by many of the test cases to \
    write the results of computations to stdout.
source=write-hex.casm
source=lib/write-hex.casm
stdout=\
1 2 3 4 5 6 7 8 9 a b c d e f 80 7f ff 999 abc \
1234 8000 8080 ffff 11111 abcde fffff abcdef \
ffffff fffffff 12345678 80000001 fedcba98 ffffffff 0
status=Ok

[read-int]
comment=Verify the behavior of the "read_int" utility function \
    which can be used to parse a signed decimal integer via stdin.
source=read-int.casm
source=lib/read-int.casm
source=lib/write-int.casm
source=lib/write-stringz.casm
stdin=\
0,1,+1,-1,100,-100,65535,12345678,2147483647,-2147483648,\
2147483648,-2147483649,123456789123456789,+10000000000,-10000000000!
stdout=\
int: 0 end: ',' int: 1 end: ',' int: 1 end: ',' int: -1 end: ',' \
int: 100 end: ',' int: -100 end: ',' int: 65535 end: ',' \
int: 12345678 end: ',' int: 2147483647 end: ',' int: -2147483648 end: ',' \
ovf end: ',' ovf end: ',' ovf end: ',' ovf end: ',' ovf end: '!'
status=Ok

[stack]
comment=Verify the behavior of a simple program which performs some \
    common and conventional stack operations.
source=stack.casm
source=lib/write-stringz.casm
stdout=Hello! Nice! Cool!

[collatz]
comment=Verify the behavior of a Collatz sequence test program.
source=collatz.casm
source=lib/read-int.casm
source=lib/write-int.casm
source=lib/write-stringz.casm
[collatz.512]
case-of=collatz
stdin=512
stdout=512 256 128 64 32 16 8 4 2 1
status=Ok
[collatz.19]
case-of=collatz
stdin=19
stdout=19 58 29 88 44 22 11 34 17 52 26 13 40 20 10 5 16 8 4 2 1
status=Ok
[collatz.1]
case-of=collatz
stdin=1
stdout=1
status=Ok
[collatz.0]
case-of=collatz
stdin=0
stdout=Error: Invalid input.
status=ExecutionExitError
[collatz.ovf]
case-of=collatz
stdin=10000000000000
stdout=Error: Invalid input.
status=ExecutionExitError

[directive-byte]
comment=Verify the behavior of the "byte" directive
source=directive-byte.casm
source=lib/write-hex.casm
stdout=44332211 4433 44 88776655
status=Ok

[directive-half]
comment=Verify the behavior of the "half" directive
source=directive-half.casm
source=lib/write-hex.casm
stdout=56781234 def09abc ba98fedc 32107654 1234 fedc 34 12
status=Ok

[directive-word]
comment=Verify the behavior of the "word" directive
source=directive-word.casm
source=lib/write-hex.casm
stdout=12345678 9abcdef0 fedcba98 76543210 5678 ba98 78 56
status=Ok

[op-add]
comment=Verify the behavior of the "add" instruction
source=op-add.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 3 111 -9 0 10 0 0 0 1
status=Ok

; TODO: rename to addwi (add word size immediate) and change behavior
; to no longer expand into two instructions.
; this will solve the conundrum of how to solve offering similar word size
; immediate options for e.g. andi, ori, xori without naming inconsistencies
[op-addi]
comment=Verify the behavior of the "addi" pseudo-instruction
source=op-addi.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 2 101 -6 0 0 10 0 -1 0 1
status=Ok

[op-addwi]
comment=Verify the behavior of the "addwi" pseudo-instruction
source=op-addwi.casm
source=lib/write-int.casm
stdout=0 16 16 16 30 2 101 -6 0 0 10 0 65535 65536 65537 0 1
status=Ok

[op-and]
comment=Verify the behavior of the "and" instruction
source=op-and.casm
source=lib/write-hex.casm
stdout=0 1 0 0 ffffffff 10010010
status=Ok

[op-andi]
comment=Verify the behavior of the "andi" instruction
source=op-andi.casm
source=lib/write-hex.casm
stdout=0 1 0 0 ffffffff 0 8421c33c 84218000 33c
status=Ok

[op-auipc]
comment=Verify the behavior of the "auipc" instruction
source=op-auipc.casm
status=Ok

[op-beq]
comment=Verify the behavior of the "beq" instruction
source=op-beq.casm
status=Ok

[op-bge]
comment=Verify the behavior of the "bge" instruction
source=op-bge.casm
stdout=NYYNYYNY
status=Ok

[op-bgeu]
comment=Verify the behavior of the "bgeu" instruction
source=op-bgeu.casm
stdout=NNNYYYYY
status=Ok

[op-blt]
comment=Verify the behavior of the "blt" instruction
source=op-blt.casm
stdout=YNNYNNYN
status=Ok

[op-bltu]
comment=Verify the behavior of the "bltu" instruction
source=op-bltu.casm
stdout=YYYNNNNN
status=Ok

[op-bne]
comment=Verify the behavior of the "bne" instruction
source=op-bne.casm
status=Ok

[op-clz]
comment=Verify the behavior of the "clz" instruction
source=op-clz.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1d 1d 1c 1c 1c 1a 19 18 18 12 \
11 10 10 c b a 9 8 8 7 6 5 4 3 2 1 0 0 0
status=Ok

[op-ctz]
comment=Verify the behavior of the "ctz" instruction
source=op-ctz.casm
source=lib/write-hex.casm
stdout=\
20 1f 1e 1e 1d 1c 1b 1a 19 18 16 14 11 \
10 10 e d c c a 8 7 6 5 4 4 3 2 1 1 0 0
status=Ok

[op-lui]
comment=Verify the behavior of the "lui" instruction
source=op-lui.casm
source=lib/write-hex.casm
stdout=\
0 10000 800000 ff0000 \
12340000 80000000 ff000000 ffff0000
status=Ok

[op-or]
comment=Verify the behavior of the "or" instruction
source=op-or.casm
source=lib/write-hex.casm
stdout=0 1 ffffffff ffffffff ffffffff dc6293c9
status=Ok

[op-ori]
comment=Verify the behavior of the "ori" instruction
source=op-ori.casm
source=lib/write-hex.casm
stdout=\
0 1 ffffffff ffffffff ffffffff \
8421c33c ffffffff ffffc33c 8421cfff
status=Ok

[op-lb]
comment=Verify the behavior of the "lb" instruction
source=op-lb.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
4 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
8 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
c 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128 \
x 0 1 2 3 -1 -3 -5 -7 124 125 126 127 -125 -126 -127 -128
status=Ok

[op-lbu]
comment=Verify the behavior of the "lbu" instruction
source=op-lbu.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
4 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
8 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
c 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255 \
x 0 1 2 3 126 127 128 129 200 201 202 203 252 253 254 255
status=Ok

[op-lh]
comment=Verify the behavior of the "lh" instruction
source=op-lh.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
4 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
8 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
c 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768 \
x 0 1 2 3 -1 -3 -5 -7 32764 32765 32766 32767 -32765 -32766 -32767 -32768
status=Ok

[op-lhu]
comment=Verify the behavior of the "lhu" instruction
source=op-lhu.casm
source=lib/write-int.casm
stdout=\
0 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
4 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
8 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
c 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535 \
x 0 1 2 3 111 222 333 444 32766 32767 32768 32769 65532 65533 65534 65535
status=Ok

[op-lw]
comment=Verify the behavior of the "lw" instruction
source=op-lw.casm
source=lib/write-hex.casm
stdout=\
0 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
4 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
8 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
c 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff \
x 0 1 2 3 1234 8000 abcd ffff ff ff00 ff0000 \
ff000000 12345678 80000000 89abcdef ffffffff
status=Ok

[op-max]
comment=Verify the behavior of the "max" instruction
source=op-max.casm
source=lib/write-int.casm
stdout=0 1 -1 1 1 2147483647 0 2147483647 256
status=Ok

[op-maxu]
comment=Verify the behavior of the "minu" instruction
source=op-maxu.casm
source=lib/write-hex.casm
stdout=0 1 1 1 ffff 4000 ffffffff ffffffff
status=Ok

[op-min]
comment=Verify the behavior of the "min" instruction
source=op-min.casm
source=lib/write-int.casm
stdout=0 1 -1 -1 -1 -2147483648 -2147483648 0 128
status=Ok

[op-minu]
comment=Verify the behavior of the "minu" instruction
source=op-minu.casm
source=lib/write-hex.casm
stdout=0 0 0 1 ff 2000 80000000 10000000
status=Ok

[op-pcnt]
comment=Verify the behavior of the "pcnt" instruction
source=op-pcnt.casm
source=lib/write-hex.casm
stdout=\
0 1 1 1 1 2 2 2 3 4 4 4 5 5 6 7 8 8 8 8 9 a a b c d e f \
10 10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f 20
status=Ok

[op-revb]
comment=Verify the behavior of the "revb" instruction
source=op-revb.casm
source=lib/write-hex.casm
stdout=0 1000000 ff000000 ff 12345678 1010101 80000001
status=Ok

[op-revh]
comment=Verify the behavior of the "revh" instruction
source=op-revh.casm
source=lib/write-hex.casm
stdout=0 10000 ff0000 ff00 12345678 1010101 800100
status=Ok

[op-sll]
comment=Verify the behavior of the "sll" instruction
source=op-sll.casm
source=lib/write-hex.casm
stdout=\
73107310 e620e620 31073100 73100000 c4000000 0 e620e620 \
73107310 e620e620 31073100 73100000 c4000000 0 e620e620 \
73107310 e620e620 31073100 73100000 c4000000 0 0 cc41cc40
status=Ok

[op-slt]
comment=Verify the behavior of the "slt" instruction
source=op-slt.casm
stdout=10010010
status=Ok

[op-slti]
comment=Verify the behavior of the "slti" instruction
source=op-slti.casm
stdout=10010010
status=Ok

[op-sltiu]
comment=Verify the behavior of the "sltiu" instruction
source=op-sltiu.casm
stdout=11100000
status=Ok

[op-sltu]
comment=Verify the behavior of the "sltu" instruction
source=op-sltu.casm
stdout=11100000
status=Ok

[op-sra]
comment=Verify the behavior of the "sra" instruction
source=op-sra.casm
source=lib/write-hex.casm
stdout=\
73107310 39883988 7310731 fffff310 1cc 0 39883988 \
73107310 39883988 7310731 fffff310 1cc 0 39883988 \
73107310 39883988 7310731 fffff310 1cc 0 ffffffff 1cc41cc4
status=Ok

[op-srl]
comment=Verify the behavior of the "srl" instruction
source=op-srl.casm
source=lib/write-hex.casm
stdout=\
73107310 39883988 7310731 f310 1cc 0 39883988 \
73107310 39883988 7310731 f310 1cc 0 39883988 \
73107310 39883988 7310731 f310 1cc 0 0 1cc41cc4
status=Ok

[op-xor]
comment=Verify the behavior of the "xor" instruction
source=op-xor.casm
source=lib/write-hex.casm
stdout=0 0 ffffffff ffffffff 0 c4209281
status=Ok

[op-xori]
comment=Verify the behavior of the "xori" instruction
source=op-xori.casm
source=lib/write-hex.casm
stdout=0 0 ffffffff ffffffff 0 8421c33c 7bde3cc3 7bde433c 8421ccc3
status=Ok
