; Test xor (bitwise XOR) with a range of values
; Store the result of rs1 ^ rs2 to rd

.extern write_hex

.const meta.exit_ok, 0x0001
.const stdio.init, 0x3000
.const stdio.put_byte, 0x3002

.text
.entry
    ; Initialize
    ecalli Z, Z, stdio.init
    li B, ' '
    ; 0
    li X, 0x00000000
    li Y, 0x00000000
    xor A, X, Y call R, write_hex ecalli Z, B, stdio.put_byte
    ; 0
    li X, 0x00000001
    li Y, 0x00000001
    xor A, X, Y call R, write_hex ecalli Z, B, stdio.put_byte
    ; ffffffff
    li X, 0x00000000
    li Y, 0xffffffff
    xor A, X, Y call R, write_hex ecalli Z, B, stdio.put_byte
    ; ffffffff
    li X, 0xffffffff
    li Y, 0x00000000
    xor A, X, Y call R, write_hex ecalli Z, B, stdio.put_byte
    ; 0
    li X, 0xffffffff
    li Y, 0xffffffff
    xor A, X, Y call R, write_hex ecalli Z, B, stdio.put_byte
    ; c4209281
    li X, 0x584213c8
    li Y, 0x9c628149
    xor A, X, Y call R, write_hex
    ; All done
    ecalli Z, Z, meta.exit_ok
